{"version":3,"file":"Markdown.stories-51abea6d.js","sources":["../../src/components/Markdown/stories/docs/component.md?raw","../../src/components/Markdown/Markdown.stories.svelte"],"sourcesContent":["export default \"The Markdown component renders markdown into HTML. That's it!\\n\\n---\\n\\n```svelte\\n<script>\\n  import { Markdown } from '@reuters-graphics/graphics-components';\\n</script>\\n\\n<Markdown source=\\\"{'My markdown **string**!'}\\\" />\\n```\\n\\n... well, almost.\\n\\nOwing to a weird quirk of Svelte's [`@html`](https://svelte.dev/docs/special-tags#html) directive (see [this issue](https://github.com/reuters-graphics/graphics-components/issues/148)), if you want your resulting HTML to be dynamic — e.g., update after a SvelteKit app [hydrates](https://kit.svelte.dev/docs/glossary#hydration) — then you may need to set the included `$staticMarkdown` store to `false` in the browser.\\n\\nFor example, if you're refreshing some data with markdown strings in a SvelteKit project using a [load function](https://kit.svelte.dev/docs/load), set the store to reflect the [`building`](https://kit.svelte.dev/docs/modules#$app-environment-building) variable, which will correctly [prerender](https://kit.svelte.dev/docs/glossary#prerendering) your markdown content AND update it after fresh data is fetched in the browser.\\n\\n```javascript\\n// +layout.js\\nimport { staticMarkdown } from '@reuters-graphics/graphics-components';\\nimport { building } from '$app/environment';\\n\\n/** @type {import('./$types').LayoutLoad} */\\nexport const load = async () => {\\n  // Set the staticMarkdown store with the value of building.\\n  staticMarkdown.set(building);\\n\\n  // Now this content will correctly refresh when a reader loads your page.\\n  const resp = await fetch(\\n    'https://graphics.thomsonreuters.com/data/my-page-content.json'\\n  );\\n  const content = await resp.json();\\n\\n  return { content };\\n};\\n```\\n\\nIf you're not updating your markdown content as above, you can safely leave the `$staticMarkdown` store alone and your page will do the right thing.\\n\"","<script>\n  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';\n\n  // @ts-ignore\n  import componentDocs from './stories/docs/component.md?raw';\n\n  import Markdown from './Markdown.svelte';\n\n  import { withComponentDocs } from '$docs/utils/withParams.js';\n\n  import Block from '../Block/Block.svelte';\n\n  const metaProps = {\n    ...withComponentDocs(componentDocs),\n  };\n</script>\n\n<Meta title=\"Components/Markdown\" component=\"{Markdown}\" {...metaProps} />\n\n<Template let:args>\n  <Block>\n    <Markdown {...args} />\n  </Block>\n</Template>\n\n<Story\n  name=\"Default\"\n  args=\"{{\n    source: 'This is *some* text in **markdown**.',\n  }}\"\n/>\n"],"names":["componentDocs","ctx","Markdown","withComponentDocs"],"mappings":"6VAAA,MAAeA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCCqBGC,EAAI,CAAA,CAAA,oJAAJA,EAAI,CAAA,CAAA,CAAA,CAAA,+bAJwBC,CAAQ,EAAOD,EAAS,CAAA,kNAWlE,OAAQ,gNAXiDA,EAAS,CAAA,CAAA,qRALrD,CAAA,GACVE,EAAkBH,CAAa,CAAA;;"}